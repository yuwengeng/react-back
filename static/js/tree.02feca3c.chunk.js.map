{"version":3,"sources":["components/CustomBreadcrumb/CustomBreadcrumb.jsx","components/CustomBreadcrumb/index.js","views/ShowView/Tree/Tree.jsx","views/ShowView/Tree/index.js"],"names":["React","memo","props","style","marginBottom","Item","to","arr","map","res","key","path","title","nextProps","prevProps","join","CustomBreadcrumb","TreeNode","treeData","children","Search","gData","generateData","_level","_preKey","_tns","preKey","tns","i","push","level","forEach","index","dataList","generateList","data","length","node","getParentKey","tree","parentKey","some","item","TreeView","state","expandedKeys","autoExpandParent","checkedKeys","selectedKeys","searchValue","onDragEnter","info","console","log","setState","onExpand","onDrop","dragObj","dropKey","eventKey","dragKey","dragNode","dropPos","pos","split","dropPosition","Number","loop","callback","splice","dropToGap","expanded","unshift","ar","onCheck","onSelect","renderTreeNodes","dataRef","onChange","e","value","target","indexOf","filter","self","this","beforeStr","substr","afterStr","color","className","gutter","span","orientation","checkable","showIcon","defaultExpandedKeys","defaultSelectedKeys","defaultCheckedKeys","icon","type","disabled","disableCheckbox","placeholder","showLine","draggable","blockNode","Component"],"mappings":"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","file":"static/js/tree.02feca3c.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Breadcrumb } from 'antd'\nimport { Link } from 'react-router-dom'\n\nconst CustomBreadcrumb = props => (\n    <Breadcrumb style={{ marginBottom: 16 }}>\n        <Breadcrumb.Item>\n            <Link to='/index'>首页</Link>\n        </Breadcrumb.Item>\n        {props.arr &&\n            props.arr.map(res => {\n                if (typeof res === 'object') {\n                    return (\n                        <Breadcrumb.Item key={res.path}>\n                            <Link to={res.path}>{res.title}</Link>\n                        </Breadcrumb.Item>\n                    )\n                } else {\n                    return <Breadcrumb.Item key={res}>{res}</Breadcrumb.Item>\n                }\n            })}\n    </Breadcrumb>\n)\n\nCustomBreadcrumb.propTypes = {\n    arr: PropTypes.array.isRequired\n}\n\nfunction shouldRender(nextProps, prevProps) {\n    if (nextProps.arr.join() === prevProps.arr.join()) {\n        return true\n    }\n    return false\n}\n\nexport default React.memo(CustomBreadcrumb, shouldRender)\n","import CustomBreadcrumb from './CustomBreadcrumb.jsx'\n\nexport default CustomBreadcrumb\n","import React, { Component } from 'react'\nimport CustomBreadcrumb from '@/components/CustomBreadcrumb'\nimport { Layout, Divider, Row, Col, Tree, Input, Icon } from 'antd'\n\nconst { TreeNode } = Tree\n\nconst treeData = [\n    {\n        title: '0-0',\n        key: '0-0',\n        children: [\n            {\n                title: '0-0-0',\n                key: '0-0-0',\n                children: [\n                    { title: '0-0-0-0', key: '0-0-0-0' },\n                    { title: '0-0-0-1', key: '0-0-0-1' },\n                    { title: '0-0-0-2', key: '0-0-0-2' }\n                ]\n            },\n            {\n                title: '0-0-1',\n                key: '0-0-1',\n                children: [\n                    { title: '0-0-1-0', key: '0-0-1-0' },\n                    { title: '0-0-1-1', key: '0-0-1-1' },\n                    { title: '0-0-1-2', key: '0-0-1-2' }\n                ]\n            },\n            {\n                title: '0-0-2',\n                key: '0-0-2'\n            }\n        ]\n    },\n    {\n        title: '0-1',\n        key: '0-1',\n        children: [\n            { title: '0-1-0-0', key: '0-1-0-0' },\n            { title: '0-1-0-1', key: '0-1-0-1' },\n            { title: '0-1-0-2', key: '0-1-0-2' }\n        ]\n    },\n    {\n        title: '0-2',\n        key: '0-2'\n    }\n]\n\nconst { Search } = Input\n\nconst x = 3\nconst y = 2\nconst z = 1\nconst gData = []\n\nconst generateData = (_level, _preKey, _tns) => {\n    const preKey = _preKey || '0'\n    const tns = _tns || gData\n\n    const children = []\n    for (let i = 0; i < x; i++) {\n        const key = `${preKey}-${i}`\n        tns.push({ title: key, key })\n        if (i < y) {\n            children.push(key)\n        }\n    }\n    if (_level < 0) {\n        return tns\n    }\n    const level = _level - 1\n    children.forEach((key, index) => {\n        tns[index].children = []\n        return generateData(level, key, tns[index].children)\n    })\n}\ngenerateData(z)\n\nconst dataList = []\nconst generateList = data => {\n    for (let i = 0; i < data.length; i++) {\n        const node = data[i]\n        const { key } = node\n        dataList.push({ key, title: key })\n        if (node.children) {\n            generateList(node.children)\n        }\n    }\n}\ngenerateList(gData)\n\nconst getParentKey = (key, tree) => {\n    let parentKey\n    for (let i = 0; i < tree.length; i++) {\n        const node = tree[i]\n        if (node.children) {\n            if (node.children.some(item => item.key === key)) {\n                parentKey = node.key\n            } else if (getParentKey(key, node.children)) {\n                parentKey = getParentKey(key, node.children)\n            }\n        }\n    }\n    return parentKey\n}\n\nclass TreeView extends Component {\n    state = {\n        expandedKeys: ['0-0-0', '0-0-1'],\n        autoExpandParent: true,\n        checkedKeys: ['0-0-0'],\n        selectedKeys: [],\n        searchValue: '',\n        gData\n    }\n\n    onDragEnter = info => {\n        console.log(info)\n        // expandedKeys 需要受控时设置\n        this.setState({\n            expandedKeys: info.expandedKeys\n        })\n    }\n\n    onExpand = expandedKeys => {\n        console.log('onExpand', expandedKeys)\n        this.setState({\n            expandedKeys,\n            autoExpandParent: false\n        })\n    }\n\n    onDrop = info => {\n        console.log(info)\n        const dropKey = info.node.props.eventKey\n        const dragKey = info.dragNode.props.eventKey\n        const dropPos = info.node.props.pos.split('-')\n        const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1])\n\n        const loop = (data, key, callback) => {\n            data.forEach((item, index, arr) => {\n                if (item.key === key) {\n                    return callback(item, index, arr)\n                }\n                if (item.children) {\n                    return loop(item.children, key, callback)\n                }\n            })\n        }\n        const data = [...this.state.gData]\n\n        // Find dragObject\n        let dragObj\n        loop(data, dragKey, (item, index, arr) => {\n            arr.splice(index, 1)\n            dragObj = item\n        })\n\n        if (!info.dropToGap) {\n            // Drop on the content\n            loop(data, dropKey, item => {\n                item.children = item.children || []\n                // where to insert 示例添加到尾部，可以是随意位置\n                item.children.push(dragObj)\n            })\n        } else if (\n            (info.node.props.children || []).length > 0 && // Has children\n            info.node.props.expanded && // Is expanded\n            dropPosition === 1 // On the bottom gap\n        ) {\n            loop(data, dropKey, item => {\n                item.children = item.children || []\n                // where to insert 示例添加到尾部，可以是随意位置\n                item.children.unshift(dragObj)\n            })\n        } else {\n            let ar\n            let i\n            loop(data, dropKey, (item, index, arr) => {\n                ar = arr\n                i = index\n            })\n            if (dropPosition === -1) {\n                ar.splice(i, 0, dragObj)\n            } else {\n                ar.splice(i + 1, 0, dragObj)\n            }\n        }\n\n        this.setState({\n            gData: data\n        })\n    }\n\n    onCheck = checkedKeys => {\n        console.log('onCheck', checkedKeys)\n        this.setState({ checkedKeys })\n    }\n\n    onSelect = (selectedKeys, info) => {\n        console.log('onSelect', info)\n        this.setState({ selectedKeys })\n    }\n\n    renderTreeNodes = data =>\n        data.map(item => {\n            if (item.children) {\n                return (\n                    <TreeNode title={item.title} key={item.key} dataRef={item}>\n                        {this.renderTreeNodes(item.children)}\n                    </TreeNode>\n                )\n            }\n            return <TreeNode key={item.key} {...item} />\n        })\n\n    onChange = e => {\n        const { value } = e.target\n        const expandedKeys = dataList\n            .map(item => {\n                if (item.title.indexOf(value) > -1) {\n                    return getParentKey(item.key, gData)\n                }\n                return null\n            })\n            .filter((item, i, self) => item && self.indexOf(item) === i)\n        this.setState({\n            expandedKeys,\n            searchValue: value,\n            autoExpandParent: true\n        })\n    }\n\n    render() {\n        const { searchValue, expandedKeys, autoExpandParent } = this.state\n        const loopDrop = data =>\n            data.map(item => {\n                if (item.children && item.children.length) {\n                    return (\n                        <TreeNode key={item.key} title={item.title}>\n                            {loop(item.children)}\n                        </TreeNode>\n                    )\n                }\n                return <TreeNode key={item.key} title={item.title} />\n            })\n        const loop = data =>\n            data.map(item => {\n                const index = item.title.indexOf(searchValue)\n                const beforeStr = item.title.substr(0, index)\n                const afterStr = item.title.substr(index + searchValue.length)\n                const title =\n                    index > -1 ? (\n                        <span>\n                            {beforeStr}\n                            <span style={{ color: '#f50' }}>{searchValue}</span>\n                            {afterStr}\n                        </span>\n                    ) : (\n                        <span>{item.title}</span>\n                    )\n                if (item.children) {\n                    return (\n                        <TreeNode key={item.key} title={title}>\n                            {loop(item.children)}\n                        </TreeNode>\n                    )\n                }\n                return <TreeNode key={item.key} title={title} />\n            })\n        return (\n            <Layout className='animated fadeIn'>\n                <div>\n                    <CustomBreadcrumb arr={['展示', '树形控件']}></CustomBreadcrumb>\n                </div>\n                <div className='base-style'>\n                    <h3>何时使用</h3>\n                    <Divider />\n                    <p>\n                        文件夹、组织架构、生物分类、国家地区等等，世间万物的大多数结构都是树形结构。使用 树控件\n                        可以完整展现其中的层级关系，并具有展开收起选择等交互功能。\n                    </p>\n                </div>\n                <Row gutter={8}>\n                    <Col span={12}>\n                        <div className='base-style'>\n                            <Divider orientation='left'>基础用法</Divider>\n                            <Tree\n                                checkable\n                                showIcon\n                                defaultExpandedKeys={['0-0-0', '0-0-1']}\n                                defaultSelectedKeys={['0-0-0', '0-0-1']}\n                                defaultCheckedKeys={['0-0-0', '0-0-1']}\n                                onSelect={this.onSelect}\n                                onCheck={this.onCheck}>\n                                <TreeNode title='parent 1' key='0-0'>\n                                    <TreeNode icon={<Icon type='meh-o' />} title='parent 1-0' key='0-0-0' disabled>\n                                        <TreeNode title='leaf' key='0-0-0-0' disableCheckbox />\n                                        <TreeNode title='leaf' key='0-0-0-1' />\n                                    </TreeNode>\n                                    <TreeNode title='parent 1-1' key='0-0-1' icon={<Icon type='meh-o' />}>\n                                        <TreeNode title={<span style={{ color: '#1890ff' }}>sss</span>} key='0-0-1-0' />\n                                    </TreeNode>\n                                </TreeNode>\n                            </Tree>\n                        </div>\n                        <div className='base-style'>\n                            <Divider orientation='left'>可搜索</Divider>\n                            <Search style={{ marginBottom: 8 }} placeholder='Search' onChange={this.onChange} />\n                            <Tree\n                                showLine\n                                onExpand={this.onExpand}\n                                expandedKeys={expandedKeys}\n                                autoExpandParent={autoExpandParent}>\n                                {loop(gData)}\n                            </Tree>\n                        </div>\n                    </Col>\n                    <Col span={12}>\n                        <div className='base-style'>\n                            <Divider orientation='left'>受控控件</Divider>\n                            <Tree\n                                checkable\n                                onExpand={this.onExpand}\n                                expandedKeys={this.state.expandedKeys}\n                                autoExpandParent={this.state.autoExpandParent}\n                                onCheck={this.onCheck}\n                                checkedKeys={this.state.checkedKeys}\n                                onSelect={this.onSelect}\n                                selectedKeys={this.state.selectedKeys}>\n                                {this.renderTreeNodes(treeData)}\n                            </Tree>\n                        </div>\n                        <div className='base-style'>\n                            <Divider orientation='left'>可拖拽</Divider>\n                            <Tree\n                                className='draggable-tree'\n                                defaultExpandedKeys={this.state.expandedKeys}\n                                draggable\n                                blockNode\n                                onDragEnter={this.onDragEnter}\n                                onDrop={this.onDrop}>\n                                {loopDrop(this.state.gData)}\n                            </Tree>\n                        </div>\n                    </Col>\n                </Row>\n            </Layout>\n        )\n    }\n}\n\nexport default TreeView\n","import TreeView from './Tree.jsx'\n\nexport default TreeView\n"],"sourceRoot":""}